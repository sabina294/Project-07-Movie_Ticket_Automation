{"name": "test_tc_tb[test_case0]", "status": "failed", "statusDetails": {"message": "Failed: Test failed due to incorrect error message.", "trace": "browser_config = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"42f89e6043627973e441c96c9cadb4fa\")>, <selenium.webdriver.support.wait.WebDriverWait (session=\"42f89e6043627973e441c96c9cadb4fa\")>)\ntest_case = {'class_value': '1500', 'error_message': 'Please enter a number between 1 and 100.', 'promo_code': 'PROMO2025', 'tickets': 11, ...}\n\n    @pytest.mark.parametrize(\"test_case\", first_invalid_case)\n    def test_tc_tb(browser_config, test_case):\n        test_case_name = \"TC_TB_003\"\n        logging.info(f\"{test_case_name} Started..\")\n        driver, wait = browser_config\n        booking_page = BookingPage(driver, wait)\n    \n        # 2. Enter a valid Number of Tickets\n        try:\n            booking_page.enter_number_of_tickets(test_case[\"tickets\"])\n            logging.info(\"Ticket Number Enter successfully.\")\n        except Exception as e:\n            logging.error(\"Element 'Number of Tickets' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Ticket Number !!!\")\n    \n        # 3. Select valid Ticket Class\n        try:\n            booking_page.select_ticket_class(test_case[\"class_value\"])\n            logging.info(\"Ticket Class Silver - $750 selected.\")\n        except Exception as e:\n            logging.error(\"Element 'Ticket Class' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Ticket Class !!!\")\n    \n        # 4. Select valid registered user\n        try:\n            booking_page.select_registered_user(test_case[\"user_value\"])\n            logging.info(\"Registered User - 'Yes' selected.\")\n        except Exception as e:\n            logging.error(\"Element 'Register User' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Register User !!!\")\n    \n        # 5. Enter a valid Promo Code\n        try:\n            booking_page.enter_promo_code(test_case[\"promo_code\"])\n            logging.info(\"Valid Promo Code Enter successfully.\")\n        except Exception as e:\n            logging.error(\"Element 'Promo Code' not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Promo Code !!!\")\n    \n        # 6. Click on the \"Book Now\" button.\n        try:\n            booking_page.click_book_button()\n            logging.info(\"Click on Book Now button successfully.\")\n        except Exception as e:\n            logging.error(\"Element 'Book now' button not found with Explicit wait.\")\n            pytest.fail(\"Test Failed. Bug found for Book Now Button !!!\")\n    \n        # Validate the error message\n        expected_error_message = test_case.get(\"error_message\")\n        actual_error_message = booking_page.get_ticket_error_message()\n    \n        if expected_error_message == actual_error_message:\n            logging.info(\"Test Passed. Expected Error Message matches Actual Error Message.\")\n        else:\n            logging.info(\"Test Failed. Expected Error Message does not match with Actual Error Message!.\")\n    \n            # Take a screenshot on failure and save the path\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n            screenshot_filename = f\"{test_case_name}_failure_{timestamp}.png\"\n            screenshot_path = os.path.join(\"logs\", \"bug_reports\", screenshot_filename)\n            capture_full_page_screenshot(driver, screenshot_path)\n    \n            # Generate the bug report string using the new function\n            bug_report_content = generate_bug_report(test_case, actual_error_message, expected_error_message,\n                                                     screenshot_path, test_case_name)\n    \n            # Save the report to a separate file using the new function\n            save_bug_report(bug_report_content, test_case_name)\n    \n>           pytest.fail(\"Test failed due to incorrect error message.\")\nE           Failed: Test failed due to incorrect error message.\n\ntests/test_TC_TB_03.py:87: Failed"}, "attachments": [{"name": "log", "source": "8dc4ca15-effa-4776-8fee-782345788af8-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'tickets': 11, 'class_value': '1500', 'user_value': 'yes', 'promo_code': 'PROMO2025', 'error_message': 'Please enter a number between 1 and 100.'}"}], "start": 1755175531375, "stop": 1755175531882, "uuid": "f7723391-ade3-468a-86a9-b5e20904502c", "historyId": "60da5bc4e668c693515166462a452c53", "testCaseId": "d80544d463fe3af4c0d02ee219151eb0", "fullName": "tests.test_TC_TB_03#test_tc_tb", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_TC_TB_03"}, {"name": "host", "value": "sabina"}, {"name": "thread", "value": "12011-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_TC_TB_03"}]}